diff --git a/node_modules/shazam-api/dist/api.d.ts b/node_modules/shazam-api/dist/api.d.ts
index 0b28b9c..4257f68 100644
--- a/node_modules/shazam-api/dist/api.d.ts
+++ b/node_modules/shazam-api/dist/api.d.ts
@@ -28,11 +28,34 @@ export declare class Endpoint {
     };
     sendRecognizeRequest(url: string, body: string): Promise<any>;
     formatAndSendRecognizeRequest(signature: DecodedMessage): Promise<{
+        genres: {primary: string}
+        hub: {
+          actions: ShazamActionType[];
+          options: ShazamOptionType[];
+          providers: ShazamProviderType[];
+          type: string;
+        };
+        images: {
+          background: string;
+          coverart: string;
+          coverarthq: string;
+          joecolor: string;
+        };
+        myshazam: {
+          apple: {
+            actions: ShazamActionType[];
+          };
+        };
+        subtitle: string;
         title: string;
-        artist: string;
-        album?: string;
-        year?: string;
-    } | null>;
+        type: string;
+        url: string;
+        urlparams: {
+          "{trackartist}": string;
+          "{tracktitle}": string;
+        };
+        sections: ShazamSectionType[];
+      } | null>;
 }
 export declare class Shazam {
     static MAX_TIME_SCEONDS: number;
diff --git a/node_modules/shazam-api/dist/api.js b/node_modules/shazam-api/dist/api.js
index ae8dc0e..271d143 100644
--- a/node_modules/shazam-api/dist/api.js
+++ b/node_modules/shazam-api/dist/api.js
@@ -68,8 +68,8 @@ class Endpoint {
         if (response.matches.length === 0)
             return null;
         const trackData = response.track, mainSection = trackData.sections.find((e) => e.type === "SONG");
-        const title = trackData.title, artist = trackData.subtitle, album = (_a = mainSection.metadata.find((e) => e.title === "Album")) === null || _a === void 0 ? void 0 : _a.text, year = (_b = mainSection.metadata.find((e) => e.title === "Released")) === null || _b === void 0 ? void 0 : _b.text;
-        return { title, artist, album, year };
+        // const title = trackData.title, artist = trackData.subtitle, album = (_a = mainSection.metadata.find((e) => e.title === "Album")) === null || _a === void 0 ? void 0 : _a.text, year = (_b = mainSection.metadata.find((e) => e.title === "Released")) === null || _b === void 0 ? void 0 : _b.text;
+        return trackData;
     }
 }
 exports.Endpoint = Endpoint;
